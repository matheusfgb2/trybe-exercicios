// Parte I
// ğŸš€ Altere o tipo das variÃ¡veis (var) para let ou const para que respeitem o escopo em que foram declaradas.
// ğŸš€ Modifique a variÃ¡vel para que respeite o escopo onde estÃ¡ sendo declarada. Lembre-se: para que a variÃ¡vel respeite o escopo, ela nÃ£o deve ser acessÃ­vel fora do escopo em que esteja sendo declarada.
function imprimeIdade() {
  for (let idade = 30; idade <= 40; idade += 1) {
    console.log('Idade dentro do for:', idade)
  }
}
imprimeIdade()

// ğŸš€ Altere o valor das propriedades do objeto, para que respeite as caracterÃ­sticas da variÃ¡vel do tipo const;
// Executando esse cÃ³digo iremos receber um erro `TypeError: Assignment to constant variable.`
const pessoa = {
  nome: 'Henri',
  idade: 20
}
pessoa.nome = 'Luna';
pessoa.idade = 19;
console.log('Nome:', pessoa.nome);
console.log('Idade:', pessoa.idade);

// ğŸš€ Modifique a variÃ¡vel para que nÃ£o ocorra Erro;
let favoriteFood = 'Lasanha';
favoriteFood = 'Hamburguer';
console.log(favoriteFood);

// ğŸš€ Modifique as concatenaÃ§Ãµes para template literals.
const name = 'Adriana';
const lastName = 'Soares';
console.log(`OlÃ¡, ${name} ${lastName}!`);

function soma(a,b) {
  let resultado = a + b;
  return resultado;
}
let a = 3;
let b = 5;
console.log(`O resultado da soma de ${a} + ${b} Ã©: ${soma(a,b)}`);

// ğŸš€ Modifique a estrutura das funÃ§Ãµes a seguir para que elas sejam arrow functions;
// ğŸš€ Transforme a funÃ§Ã£o numeroAleatorio em uma arrow function;
const numeroAleatorio = () => Math.random();
console.log(numeroAleatorio());

// ğŸš€ Transforme a funÃ§Ã£o hello em uma arrow function;
const hello = nome => `OlÃ¡, ${nome}!`;
let nome = 'Ivan';
console.log(hello(nome));

// ğŸš€ Transforme a funÃ§Ã£o nomeCompleto em uma arrow function;
const nomeCompleto = (nome, sobrenome) => `${nome} ${sobrenome}`
let nome = 'Ivan';
let sobrenome = 'Pires';
console.log(nomeCompleto(nome, sobrenome));

// ğŸš€ Altere a expressÃ£o if/else utilizando ternary operator;
let speed = 90;
const speedCar = (speed) => speed >= 120 ? `VocÃª ultrapassou o limite de velocidade` : `VocÃª estÃ¡ na velocidade permitida`;
console.log(speedCar(speed));

//BÃ´nus
// FunÃ§Ã£o 1: Escreva uma funÃ§Ã£o que substitua a letra â€˜xâ€™ em uma frase.
//// O nome da funÃ§Ã£o deverÃ¡ ser substituaX;
//// A funÃ§Ã£o deverÃ¡ receber um nome por parÃ¢metro;
//// Declare dentro da funÃ§Ã£o uma variÃ¡vel do tipo const, com o nome frase, atribuindo o valor 'Tryber x aqui!';
//// A funÃ§Ã£o deverÃ¡ retornar uma nova frase em que o x da frase 'Tryber x aqui!' seja substituÃ­do pelo nome passado por parÃ¢metro.
// Exemplo:
//// ParÃ¢metro: â€˜Bebetoâ€™
//// Retorno: â€˜Tryber Bebeto aqui!â€™
//// Spoiler: O mÃ©todo split() pode ser utilizado de diferentes maneiras, como para separar as palavras de um texto.

const substituaX = nome => {
  const frase = 'Tryber x aqui!';
  const fraseArray = frase.split(' ');
  fraseArray[1] = nome;
  return fraseArray.join(' ');
}
// FunÃ§Ã£o 2: Escreva uma funÃ§Ã£o que irÃ¡ receber o retorno da FunÃ§Ã£o 1 por parÃ¢metro e retornarÃ¡ uma nova string.
//// O nome da funÃ§Ã£o deverÃ¡ ser minhasSkills;
//// A funÃ§Ã£o deverÃ¡ receber o retorno da FunÃ§Ã£o 1 - substituaX por parÃ¢metro;
//// Declare dentro da funÃ§Ã£o uma variÃ¡vel com o nome skills, do tipo const;
//// A variÃ¡vel skills deverÃ¡ ser um array contendo trÃªs strings com tecnologias que vocÃª jÃ¡ aprendeu.
//// Crie uma varÃ¡vel do tipo let e concatene o valor retornado da FunÃ§Ã£o 1 - substituaX (utilize template literals), a frase 'Minhas trÃªs principais habilidades sÃ£o:' e o valor da variÃ¡vel skills.
// Exemplo de retorno:
//// Tryber Bebeto aqui!
//// Minhas trÃªs principais habilidades sÃ£o:
//// JavaScript
//// HTML
//// CSS
const minhasSkills = func => {
  const skills = ['Javascript', 'HTML', 'CSS'];
  let resultado = `${func}\nMinhas trÃªs principais habilidades sÃ£o:`;
  for (skill of skills) {
    resultado += `\n- ${skill}`
  }
  return resultado;
}
console.log(minhasSkills(substituaX('Didi MocÃ³')));